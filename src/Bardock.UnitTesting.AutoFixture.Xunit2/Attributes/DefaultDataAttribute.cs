using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using Ploeh.AutoFixture;
using Ploeh.AutoFixture.Xunit2;

namespace Bardock.UnitTesting.AutoFixture.Xunit2.Fixtures.Attributes
{
    /// <summary>
    /// An abstract class that provides auto-generated data specimens generated by AutoFixture as an extension
    /// to xUnit.net's Theory attribute.
    /// You must inherit this class in order to specify a default <see cref="ICustomization"/> instance at constructors.
    /// </summary>
    public abstract class DefaultDataAttribute : AutoDataAttribute
    {
        private ICustomization _defaultCustomization;
        private Type[] _customizationTypes;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultDataAttribute"/> class with default customization
        /// and others to apply.
        /// </summary>
        /// <param name="defaultCustomization">The default <see cref="ICustomization"/> instance.</param>
        /// <param name="customizationTypes">Other <see cref="ICustomization"/> types to apply.</param>
        public DefaultDataAttribute(ICustomization defaultCustomization, params Type[] customizationTypes)
        {
            _defaultCustomization = defaultCustomization;
            _customizationTypes = customizationTypes;
        }

        public override IEnumerable<object[]> GetData(MethodInfo methodUnderTest)
        {
            this.Fixture.Customize(new CompositeCustomization(
                    new ICustomization[] { _defaultCustomization }
                        .Concat(_customizationTypes.Select(t => (ICustomization)Activator.CreateInstance(t, null)))));

            return base.GetData(methodUnderTest);
        }
    }
}